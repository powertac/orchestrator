<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>The purpose of this job is to start a broker on a particular machine, for participating in an experiment game.&#xd;
This job is meant to be started via a rest call with certain commandline arguments&#xd;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>experimentUrl</name>
          <description></description>
          <defaultValue>http://awesom-o-4000:8080/ExperimentScheduler/</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>brokerId</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>gameId</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <org.jvnet.jenkins.plugins.nodelabelparameter.NodeParameterDefinition plugin="nodelabelparameter@1.7.1">
          <name>machine</name>
          <description></description>
          <allowedSlaves>
            <string>ubuntu10</string>
            <string>ubuntu11</string>
            <string>ubuntu12</string>
            <string>ubuntu13</string>
            <string>ubuntu14</string>
            <string>ubuntu15</string>
            <string>ubuntu16</string>
            <string>ubuntu17</string>
            <string>ubuntu18</string>
            <string>ubuntu19</string>
          </allowedSlaves>
          <defaultSlaves>
            <string>master</string>
          </defaultSlaves>
          <triggerIfResult>allowMultiSelectionForConcurrentBuilds</triggerIfResult>
          <allowMultiNodeSelection>true</allowMultiNodeSelection>
          <triggerConcurrentBuilds>true</triggerConcurrentBuilds>
          <ignoreOfflineNodes>false</ignoreOfflineNodes>
          <nodeEligibility class="org.jvnet.jenkins.plugins.nodelabelparameter.node.AllNodeEligibility"/>
        </org.jvnet.jenkins.plugins.nodelabelparameter.NodeParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>gameName</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@1.8.4">
      <maxConcurrentPerNode>1</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories>
        <string>game-server</string>
      </categories>
      <throttleEnabled>true</throttleEnabled>
      <throttleOption>category</throttleOption>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>machine</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

###############################################################################
# You might want or need to change these
###############################################################################
LOGFILE=&quot;./log/$(date -u +%y%m%d_%H%M).log&quot;
MVN_CMD=&quot;mvn&quot;

interfacePath=&quot;faces/brokerLogin.jsp&quot;
jarPath=&quot;faces/download&quot;
propertiesPath=&quot;faces/properties.jsp&quot;
LOGFILE=&quot;./log/broker.$(date -u +%y%m%d_%H%M).log&quot;


###############################################################################
# No need to change anything below this line
###############################################################################

function log () {
    if [ &quot;$1&quot; == &apos;nl&apos; ]; then
        echo -e &quot;\n$2&quot; | tee -a $LOGFILE
    else
        echo -e &quot;$1&quot; | tee -a $LOGFILE
    fi
}

function cleanup () {
    # TODO Enable below
    #log nl &quot;Cleaning up&quot;
    #rm -fr ./log/*.state
    #rm -fr ./log/*.trace
    #rm -fr ./broker*
    #rm -fr ./game*

    log nl &quot;Not cleaning up, need to enable this&quot;
}

function get_jar () {
    wget -q -O broker.jar $jarUrl
    SIZE=$(stat -c%s &quot;broker.jar&quot;)
    if [ $SIZE -le 10 ] ; then
        log nl &quot;Error getting jar : $jarUrl&quot;
        cleanup
        exit 1
    else
        log &quot;Jar retrieved&quot;
    fi
}

function get_properties () {
    wget -O broker.properties $propertiesUrl
    SIZE=$(stat -c%s &quot;broker.properties&quot;)
    if [ $SIZE -le 10 ] ; then
        log nl &quot;Error getting properties : $propertiesUrl&quot;
        cleanup
        exit 1
    else
        log &quot;Properties retrieved&quot;
    fi
}


###############################################################################
# Here we go!
###############################################################################

# Some intermediate variables
interfaceUrl=&quot;$experimentUrl$interfacePath&quot;
propertiesUrl=&quot;$experimentUrl$propertiesPath?brokerId=$brokerId&amp;gameId=$gameId&quot;
jarUrl=&quot;$experimentUrl$jarPath?brokerId=$brokerId&quot;
logName=&quot;$gameName.broker-$brokerId.tar.gz&quot;

# Make sure logdir exists
DIRECTORY=&quot;log&quot;
if [ ! -d &quot;$DIRECTORY&quot; ]; then
  mkdir $DIRECTORY
fi

log &quot;&quot;
StartTime=$(date +%s)
log &quot;StartTime      : $(date -u +%F\ %H:%M:%S)&quot;
log &quot;Nodename       : $NODE_NAME&quot;
log &quot;BuildNumber    : $BUILD_NUMBER&quot;
log &quot;Account        : ${USER}&quot;
log &quot;GameId         : $gameId&quot;
log &quot;GameName       : $gameName&quot;
log &quot;brokerId       : $brokerId&quot;
log &quot;experimentUrl  : $experimentUrl&quot;
log &quot;interfacePath  : $interfacePath&quot;
log &quot;interfaceUrl   : $interfaceUrl&quot;
log &quot;jarPath        : $jarPath&quot;
log &quot;jarUrl         : $jarUrl&quot;
log &quot;propertiesPath : $propertiesPath&quot;
log &quot;propertiesUrl  : $propertiesUrl&quot;
log &quot;logName        : $logName&quot;
log &quot;MVN_CMD        : $MVN_CMD&quot;

log nl &quot;Get the properties file from $propertiesUrl&quot;
get_properties

log nl &quot;Get the jar file from $jarUrl&quot;
get_jar

CMD=&quot;java -jar broker.jar&quot;
log nl &quot;Run broker : $CMD \n&quot;
eval $CMD

log nl &quot;Compressing log files&quot;
tar -czvf $logName log/*.state log/*.trace

log nl &quot;Sending log file&quot;
curl --upload-file $logName &quot;$interfaceUrl?fileName=$logName&quot;

# TODO Do we need to find out if failed or succeeded?
# If game aborted or killed, game sets agents to pending
log nl &quot;Notify TS agent is retiring&quot;
wget --spider -q &quot;$interfaceUrl?action=agentStatus&amp;status=complete&amp;brokerId=$brokerId&amp;gameId=$gameId&quot;

cleanup

exit 0
      </command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>